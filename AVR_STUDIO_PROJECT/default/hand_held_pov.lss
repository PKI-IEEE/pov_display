
hand_held_pov.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d6  00800100  000001c8  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000009f  00000000  00000000  00000432  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000297  00000000  00000000  000004d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001c0  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002d8  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000c00  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000017e  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000009b  00000000  00000000  00000dde  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00000e79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	19 c0       	rjmp	.+50     	; 0x5a <__bad_interrupt>
  28:	18 c0       	rjmp	.+48     	; 0x5a <__bad_interrupt>
  2a:	17 c0       	rjmp	.+46     	; 0x5a <__bad_interrupt>
  2c:	16 c0       	rjmp	.+44     	; 0x5a <__bad_interrupt>
  2e:	15 c0       	rjmp	.+42     	; 0x5a <__bad_interrupt>
  30:	14 c0       	rjmp	.+40     	; 0x5a <__bad_interrupt>
  32:	13 c0       	rjmp	.+38     	; 0x5a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	12 e0       	ldi	r17, 0x02	; 2
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e8 ec       	ldi	r30, 0xC8	; 200
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a6 3d       	cpi	r26, 0xD6	; 214
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>
  56:	3e d0       	rcall	.+124    	; 0xd4 <main>
  58:	b5 c0       	rjmp	.+362    	; 0x1c4 <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <adcInit>:
void delay(void);
void displayFWD(unsigned char letterIn);

void adcInit() {

	DDRC = 0; // ADC port input
  5c:	17 b8       	out	0x07, r1	; 7
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); // ADC Enable, ADC prescaler /128
  5e:	ea e7       	ldi	r30, 0x7A	; 122
  60:	f0 e0       	ldi	r31, 0x00	; 0
  62:	80 81       	ld	r24, Z
  64:	87 68       	ori	r24, 0x87	; 135
  66:	80 83       	st	Z, r24
}
  68:	08 95       	ret

0000006a <displayInit>:

void displayInit() {
	DDRD = 0xFF; // LED's as outputs
  6a:	8f ef       	ldi	r24, 0xFF	; 255
  6c:	8a b9       	out	0x0a, r24	; 10
	LED_PORT = 0xFF; // turn all LED's off to start
  6e:	8b b9       	out	0x0b, r24	; 11
	TCCR1B |= (1<<CS12) | (1<<CS10); // /1024 prescaler 64us tick
  70:	e1 e8       	ldi	r30, 0x81	; 129
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	80 81       	ld	r24, Z
  76:	85 60       	ori	r24, 0x05	; 5
  78:	80 83       	st	Z, r24
}
  7a:	08 95       	ret

0000007c <delay>:

void delay(void) {
	TCNT0 = 190; // 3.056ms
  7c:	8e eb       	ldi	r24, 0xBE	; 190
  7e:	86 bd       	out	0x26, r24	; 38
	TCCR0B |= (1<<CS02); // /256 prescaler 1 tick every 16us
  80:	85 b5       	in	r24, 0x25	; 37
  82:	84 60       	ori	r24, 0x04	; 4
  84:	85 bd       	out	0x25, r24	; 37
	while((TIFR0 & (1<<TOV0)) == 0);
  86:	a8 9b       	sbis	0x15, 0	; 21
  88:	fe cf       	rjmp	.-4      	; 0x86 <delay+0xa>
	TCCR0B = 0;
  8a:	15 bc       	out	0x25, r1	; 37
	TIFR0 |= (1<<TOV0);
  8c:	a8 9a       	sbi	0x15, 0	; 21
}
  8e:	08 95       	ret

00000090 <displayFWD>:

void displayFWD(unsigned char letterIn) {
  90:	ff 92       	push	r15
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29

	for(uint8_t i=0;i<5;i++) {
		LED_PORT = ~(letterArray[((letterIn - 0x20) * 5) + i]); // put the column of the current letter out to the LEDs
  9a:	95 e0       	ldi	r25, 0x05	; 5
  9c:	89 9f       	mul	r24, r25
  9e:	c0 01       	movw	r24, r0
  a0:	11 24       	eor	r1, r1
  a2:	ec 01       	movw	r28, r24
  a4:	c1 59       	subi	r28, 0x91	; 145
  a6:	df 4f       	sbci	r29, 0xFF	; 255
		delay(); // delay while on
		LED_PORT = 0xFF; // turn LEDs off
  a8:	ff 24       	eor	r15, r15
  aa:	fa 94       	dec	r15
	TIFR0 |= (1<<TOV0);
}

void displayFWD(unsigned char letterIn) {

	for(uint8_t i=0;i<5;i++) {
  ac:	8c 01       	movw	r16, r24
  ae:	0c 58       	subi	r16, 0x8C	; 140
  b0:	1f 4f       	sbci	r17, 0xFF	; 255
		LED_PORT = ~(letterArray[((letterIn - 0x20) * 5) + i]); // put the column of the current letter out to the LEDs
  b2:	89 91       	ld	r24, Y+
  b4:	80 95       	com	r24
  b6:	8b b9       	out	0x0b, r24	; 11
		delay(); // delay while on
  b8:	e1 df       	rcall	.-62     	; 0x7c <delay>
		LED_PORT = 0xFF; // turn LEDs off
  ba:	fb b8       	out	0x0b, r15	; 11
		delay(); // delay while off
  bc:	df df       	rcall	.-66     	; 0x7c <delay>
	TIFR0 |= (1<<TOV0);
}

void displayFWD(unsigned char letterIn) {

	for(uint8_t i=0;i<5;i++) {
  be:	c0 17       	cp	r28, r16
  c0:	d1 07       	cpc	r29, r17
  c2:	b9 f7       	brne	.-18     	; 0xb2 <displayFWD+0x22>
		delay(); // delay while on
		LED_PORT = 0xFF; // turn LEDs off
		delay(); // delay while off
	
	}
	delay();
  c4:	db df       	rcall	.-74     	; 0x7c <delay>
	delay(); // puts a space between each column
  c6:	da df       	rcall	.-76     	; 0x7c <delay>
}
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	1f 91       	pop	r17
  ce:	0f 91       	pop	r16
  d0:	ff 90       	pop	r15
  d2:	08 95       	ret

000000d4 <main>:

int main(void) {
  d4:	8f 92       	push	r8
  d6:	9f 92       	push	r9
  d8:	af 92       	push	r10
  da:	bf 92       	push	r11
  dc:	cf 92       	push	r12
  de:	df 92       	push	r13
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
	DDRC = 0; // ADC port input
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); // ADC Enable, ADC prescaler /128
}

void displayInit() {
	DDRD = 0xFF; // LED's as outputs
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	8a b9       	out	0x0a, r24	; 10
	LED_PORT = 0xFF; // turn all LED's off to start
  f0:	8b b9       	out	0x0b, r24	; 11
	TCCR1B |= (1<<CS12) | (1<<CS10); // /1024 prescaler 64us tick
  f2:	80 91 81 00 	lds	r24, 0x0081
  f6:	85 60       	ori	r24, 0x05	; 5
  f8:	80 93 81 00 	sts	0x0081, r24
void delay(void);
void displayFWD(unsigned char letterIn);

void adcInit() {

	DDRC = 0; // ADC port input
  fc:	17 b8       	out	0x07, r1	; 7
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); // ADC Enable, ADC prescaler /128
  fe:	80 91 7a 00 	lds	r24, 0x007A
 102:	87 68       	ori	r24, 0x87	; 135
 104:	80 93 7a 00 	sts	0x007A, r24
 108:	00 e0       	ldi	r16, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 10a:	30 e9       	ldi	r19, 0x90	; 144
 10c:	a3 2e       	mov	r10, r19
 10e:	31 e0       	ldi	r19, 0x01	; 1
 110:	b3 2e       	mov	r11, r19
			_delay_ms(60); // wait before message start
				
			for(uint8_t i=0;i<currentMessageLength;i++) { // push out the message
				displayFWD(message[i]);
			}
			LED_PORT = 0xFF; // turn LEDs off
 112:	88 24       	eor	r8, r8
 114:	8a 94       	dec	r8
			if(TCNT1 < 31250) {	 // one second between messages
				message = message1;
				currentMessageLength = numCharFirstMessage;
			}
			else {
				message = message2;
 116:	26 e0       	ldi	r18, 0x06	; 6
 118:	c2 2e       	mov	r12, r18
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	d2 2e       	mov	r13, r18
				currentMessageLength = numCharSecondMessage;
 11e:	95 e0       	ldi	r25, 0x05	; 5
 120:	99 2e       	mov	r9, r25
		newAccel = ((accelReadingHigh << 8) | (accelReadingLow));// combine ADC value

		if(newAccel > 1000 && swipe <= 1  ) { // if there is high acceleration in one direction
		
			if(TCNT1 < 31250) {	 // one second between messages
				message = message1;
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	e8 2e       	mov	r14, r24
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	f8 2e       	mov	r15, r24
 12a:	01 c0       	rjmp	.+2      	; 0x12e <main+0x5a>
void displayFWD(unsigned char letterIn);

void adcInit() {

	DDRC = 0; // ADC port input
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); // ADC Enable, ADC prescaler /128
 12c:	00 e0       	ldi	r16, 0x00	; 0
	displayInit();
	adcInit();

	while(1) {
		
		ADCSRA |= (1<<ADSC); // start ADC conversion
 12e:	80 91 7a 00 	lds	r24, 0x007A
 132:	80 64       	ori	r24, 0x40	; 64
 134:	80 93 7a 00 	sts	0x007A, r24
		while((ADCSRA & (1<<ADIF))==0); // wait for ADC conversion 
 138:	80 91 7a 00 	lds	r24, 0x007A
 13c:	84 ff       	sbrs	r24, 4
 13e:	fc cf       	rjmp	.-8      	; 0x138 <main+0x64>
		accelReadingLow = ADCL; // get ADC low value
 140:	90 91 78 00 	lds	r25, 0x0078
		accelReadingHigh = ADCH; // get ADC high value
 144:	80 91 79 00 	lds	r24, 0x0079
		newAccel = ((accelReadingHigh << 8) | (accelReadingLow));// combine ADC value
 148:	d8 2f       	mov	r29, r24
 14a:	c0 e0       	ldi	r28, 0x00	; 0
 14c:	89 2f       	mov	r24, r25
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	8c 2b       	or	r24, r28
 152:	9d 2b       	or	r25, r29

		if(newAccel > 1000 && swipe <= 1  ) { // if there is high acceleration in one direction
 154:	23 e0       	ldi	r18, 0x03	; 3
 156:	89 3e       	cpi	r24, 0xE9	; 233
 158:	92 07       	cpc	r25, r18
 15a:	60 f1       	brcs	.+88     	; 0x1b4 <main+0xe0>
		
			if(TCNT1 < 31250) {	 // one second between messages
 15c:	80 91 84 00 	lds	r24, 0x0084
 160:	90 91 85 00 	lds	r25, 0x0085
 164:	82 51       	subi	r24, 0x12	; 18
 166:	9a 47       	sbci	r25, 0x7A	; 122
 168:	28 f4       	brcc	.+10     	; 0x174 <main+0xa0>
				message = message1;
 16a:	f0 92 0e 01 	sts	0x010E, r15
 16e:	e0 92 0d 01 	sts	0x010D, r14
 172:	04 c0       	rjmp	.+8      	; 0x17c <main+0xa8>
				currentMessageLength = numCharFirstMessage;
			}
			else {
				message = message2;
 174:	d0 92 0e 01 	sts	0x010E, r13
 178:	c0 92 0d 01 	sts	0x010D, r12
				currentMessageLength = numCharSecondMessage;
 17c:	90 92 0c 01 	sts	0x010C, r9
 180:	88 e5       	ldi	r24, 0x58	; 88
 182:	92 e0       	ldi	r25, 0x02	; 2
 184:	f5 01       	movw	r30, r10
 186:	31 97       	sbiw	r30, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0xb2>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 18a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18c:	d9 f7       	brne	.-10     	; 0x184 <main+0xb0>
 18e:	10 e0       	ldi	r17, 0x00	; 0
 190:	09 c0       	rjmp	.+18     	; 0x1a4 <main+0xd0>
			}
			_delay_ms(60); // wait before message start
				
			for(uint8_t i=0;i<currentMessageLength;i++) { // push out the message
				displayFWD(message[i]);
 192:	e0 91 0d 01 	lds	r30, 0x010D
 196:	f0 91 0e 01 	lds	r31, 0x010E
 19a:	e1 0f       	add	r30, r17
 19c:	f1 1d       	adc	r31, r1
 19e:	80 81       	ld	r24, Z
 1a0:	77 df       	rcall	.-274    	; 0x90 <displayFWD>
				message = message2;
				currentMessageLength = numCharSecondMessage;
			}
			_delay_ms(60); // wait before message start
				
			for(uint8_t i=0;i<currentMessageLength;i++) { // push out the message
 1a2:	1f 5f       	subi	r17, 0xFF	; 255
 1a4:	80 91 0c 01 	lds	r24, 0x010C
 1a8:	18 17       	cp	r17, r24
 1aa:	98 f3       	brcs	.-26     	; 0x192 <main+0xbe>
				displayFWD(message[i]);
			}
			LED_PORT = 0xFF; // turn LEDs off
 1ac:	8b b8       	out	0x0b, r8	; 11
			delay(); 
 1ae:	66 df       	rcall	.-308    	; 0x7c <delay>
			delay(); // puts some space between each letter
 1b0:	65 df       	rcall	.-310    	; 0x7c <delay>
 1b2:	bd cf       	rjmp	.-134    	; 0x12e <main+0x5a>
		}
		else if(newAccel < 50) { // acceleration in one direction leads to deceleration in the other direction
 1b4:	c2 97       	sbiw	r24, 0x32	; 50
 1b6:	08 f0       	brcs	.+2      	; 0x1ba <main+0xe6>
 1b8:	ba cf       	rjmp	.-140    	; 0x12e <main+0x5a>
			swipe++; 
		}
	// Every swipe across and then back causes acceleration in the one direction to be registered twice. 	
		if(swipe >= 2) { 
 1ba:	01 30       	cpi	r16, 0x01	; 1
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <main+0xec>
 1be:	b6 cf       	rjmp	.-148    	; 0x12c <main+0x58>
 1c0:	01 e0       	ldi	r16, 0x01	; 1
 1c2:	b5 cf       	rjmp	.-150    	; 0x12e <main+0x5a>

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
